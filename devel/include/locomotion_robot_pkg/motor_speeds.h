// Generated by gencpp from file locomotion_robot_pkg/motor_speeds.msg
// DO NOT EDIT!


#ifndef LOCOMOTION_ROBOT_PKG_MESSAGE_MOTOR_SPEEDS_H
#define LOCOMOTION_ROBOT_PKG_MESSAGE_MOTOR_SPEEDS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>

namespace locomotion_robot_pkg
{
template <class ContainerAllocator>
struct motor_speeds_
{
  typedef motor_speeds_<ContainerAllocator> Type;

  motor_speeds_()
    : vel_a()
    , vel_b()  {
    }
  motor_speeds_(const ContainerAllocator& _alloc)
    : vel_a(_alloc)
    , vel_b(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Float32_<ContainerAllocator>  _vel_a_type;
  _vel_a_type vel_a;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _vel_b_type;
  _vel_b_type vel_b;





  typedef boost::shared_ptr< ::locomotion_robot_pkg::motor_speeds_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::locomotion_robot_pkg::motor_speeds_<ContainerAllocator> const> ConstPtr;

}; // struct motor_speeds_

typedef ::locomotion_robot_pkg::motor_speeds_<std::allocator<void> > motor_speeds;

typedef boost::shared_ptr< ::locomotion_robot_pkg::motor_speeds > motor_speedsPtr;
typedef boost::shared_ptr< ::locomotion_robot_pkg::motor_speeds const> motor_speedsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::locomotion_robot_pkg::motor_speeds_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::locomotion_robot_pkg::motor_speeds_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::locomotion_robot_pkg::motor_speeds_<ContainerAllocator1> & lhs, const ::locomotion_robot_pkg::motor_speeds_<ContainerAllocator2> & rhs)
{
  return lhs.vel_a == rhs.vel_a &&
    lhs.vel_b == rhs.vel_b;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::locomotion_robot_pkg::motor_speeds_<ContainerAllocator1> & lhs, const ::locomotion_robot_pkg::motor_speeds_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace locomotion_robot_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::locomotion_robot_pkg::motor_speeds_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::locomotion_robot_pkg::motor_speeds_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::locomotion_robot_pkg::motor_speeds_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::locomotion_robot_pkg::motor_speeds_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::locomotion_robot_pkg::motor_speeds_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::locomotion_robot_pkg::motor_speeds_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::locomotion_robot_pkg::motor_speeds_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a93b21787a0d53fc674e601163010b45";
  }

  static const char* value(const ::locomotion_robot_pkg::motor_speeds_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa93b21787a0d53fcULL;
  static const uint64_t static_value2 = 0x674e601163010b45ULL;
};

template<class ContainerAllocator>
struct DataType< ::locomotion_robot_pkg::motor_speeds_<ContainerAllocator> >
{
  static const char* value()
  {
    return "locomotion_robot_pkg/motor_speeds";
  }

  static const char* value(const ::locomotion_robot_pkg::motor_speeds_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::locomotion_robot_pkg::motor_speeds_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Float32 vel_a\n"
"std_msgs/Float32 vel_b\n"
"================================================================================\n"
"MSG: std_msgs/Float32\n"
"float32 data\n"
;
  }

  static const char* value(const ::locomotion_robot_pkg::motor_speeds_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::locomotion_robot_pkg::motor_speeds_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.vel_a);
      stream.next(m.vel_b);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct motor_speeds_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::locomotion_robot_pkg::motor_speeds_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::locomotion_robot_pkg::motor_speeds_<ContainerAllocator>& v)
  {
    s << indent << "vel_a: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.vel_a);
    s << indent << "vel_b: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.vel_b);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LOCOMOTION_ROBOT_PKG_MESSAGE_MOTOR_SPEEDS_H
