// Generated by gencpp from file locomotion_robot_pkg/sub_move.msg
// DO NOT EDIT!


#ifndef LOCOMOTION_ROBOT_PKG_MESSAGE_SUB_MOVE_H
#define LOCOMOTION_ROBOT_PKG_MESSAGE_SUB_MOVE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/String.h>
#include <std_msgs/Int32.h>
#include <std_msgs/Int32.h>

namespace locomotion_robot_pkg
{
template <class ContainerAllocator>
struct sub_move_
{
  typedef sub_move_<ContainerAllocator> Type;

  sub_move_()
    : primitive()
    , distance()
    , angle()  {
    }
  sub_move_(const ContainerAllocator& _alloc)
    : primitive(_alloc)
    , distance(_alloc)
    , angle(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::String_<ContainerAllocator>  _primitive_type;
  _primitive_type primitive;

   typedef  ::std_msgs::Int32_<ContainerAllocator>  _distance_type;
  _distance_type distance;

   typedef  ::std_msgs::Int32_<ContainerAllocator>  _angle_type;
  _angle_type angle;





  typedef boost::shared_ptr< ::locomotion_robot_pkg::sub_move_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::locomotion_robot_pkg::sub_move_<ContainerAllocator> const> ConstPtr;

}; // struct sub_move_

typedef ::locomotion_robot_pkg::sub_move_<std::allocator<void> > sub_move;

typedef boost::shared_ptr< ::locomotion_robot_pkg::sub_move > sub_movePtr;
typedef boost::shared_ptr< ::locomotion_robot_pkg::sub_move const> sub_moveConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::locomotion_robot_pkg::sub_move_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::locomotion_robot_pkg::sub_move_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::locomotion_robot_pkg::sub_move_<ContainerAllocator1> & lhs, const ::locomotion_robot_pkg::sub_move_<ContainerAllocator2> & rhs)
{
  return lhs.primitive == rhs.primitive &&
    lhs.distance == rhs.distance &&
    lhs.angle == rhs.angle;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::locomotion_robot_pkg::sub_move_<ContainerAllocator1> & lhs, const ::locomotion_robot_pkg::sub_move_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace locomotion_robot_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::locomotion_robot_pkg::sub_move_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::locomotion_robot_pkg::sub_move_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::locomotion_robot_pkg::sub_move_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::locomotion_robot_pkg::sub_move_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::locomotion_robot_pkg::sub_move_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::locomotion_robot_pkg::sub_move_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::locomotion_robot_pkg::sub_move_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1167768357c0e474a6f4a552c72b1fa2";
  }

  static const char* value(const ::locomotion_robot_pkg::sub_move_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1167768357c0e474ULL;
  static const uint64_t static_value2 = 0xa6f4a552c72b1fa2ULL;
};

template<class ContainerAllocator>
struct DataType< ::locomotion_robot_pkg::sub_move_<ContainerAllocator> >
{
  static const char* value()
  {
    return "locomotion_robot_pkg/sub_move";
  }

  static const char* value(const ::locomotion_robot_pkg::sub_move_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::locomotion_robot_pkg::sub_move_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/String primitive\n"
"std_msgs/Int32 distance\n"
"std_msgs/Int32 angle\n"
"================================================================================\n"
"MSG: std_msgs/String\n"
"string data\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Int32\n"
"int32 data\n"
;
  }

  static const char* value(const ::locomotion_robot_pkg::sub_move_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::locomotion_robot_pkg::sub_move_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.primitive);
      stream.next(m.distance);
      stream.next(m.angle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct sub_move_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::locomotion_robot_pkg::sub_move_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::locomotion_robot_pkg::sub_move_<ContainerAllocator>& v)
  {
    s << indent << "primitive: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.primitive);
    s << indent << "distance: ";
    s << std::endl;
    Printer< ::std_msgs::Int32_<ContainerAllocator> >::stream(s, indent + "  ", v.distance);
    s << indent << "angle: ";
    s << std::endl;
    Printer< ::std_msgs::Int32_<ContainerAllocator> >::stream(s, indent + "  ", v.angle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LOCOMOTION_ROBOT_PKG_MESSAGE_SUB_MOVE_H
